# =============================================================================
# OCORRÊNCIA E FREQUÊNCIA DE ONDAS DE CALOR E FRIO EM MAPUTO
# Baseado em padrões WMO/IPCC/FAO/INPE
# Autor: FRANCISCO NORIS
# Data: 07 DE AGOSTO DE 2025
# =============================================================================

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import linregress
from sklearn.preprocessing import StandardScaler
from fancyimpute import IterativeSVD
from matplotlib.backends.backend_pdf import PdfPages
import warnings

warnings.filterwarnings('ignore')
sns.set(style='whitegrid')

# === CONFIGURAÇÕES ===
caminho_arquivo = "..."
caminho_saida = "..."
os.makedirs(caminho_saida, exist_ok=True)

# === 1. LEITURA E PRÉ-PROCESSAMENTO ===
df = pd.read_excel(caminho_arquivo, engine='openpyxl')
df.columns = ['YEAR', 'DIA_MES', 'T2M_MAX', 'T2M_MIN']
df['DIA_MES'] = pd.to_datetime(df['DIA_MES'], errors='coerce')

# Corrige ano usando coluna YEAR (manuseando anos bissextos)
def corrigir_ano(row):
    try:
        return row['DIA_MES'].replace(year=int(row['YEAR']))
    except ValueError:
        # Ajusta 29/02 para 28/02 se não for bissexto
        if row['DIA_MES'].month == 2 and row['DIA_MES'].day == 29:
            return row['DIA_MES'].replace(day=28, year=int(row['YEAR']))
        else:
            return pd.NaT

df['DATA_COMPLETA'] = df.apply(corrigir_ano, axis=1)
df.dropna(subset=['DATA_COMPLETA'], inplace=True)
df.drop_duplicates(subset=['DATA_COMPLETA'], inplace=True)
df['T2M_MED'] = (df['T2M_MAX'] + df['T2M_MIN']) / 2

# === 2. IMPUTAÇÃO DE DADOS COM IterativeSVD ===
# Justificativa: Retém estrutura latente multivariada dos dados sem eliminar variabilidade.
variaveis = ['T2M_MAX', 'T2M_MIN', 'T2M_MED']
escalador = StandardScaler()
df[variaveis] = IterativeSVD(rank=2).fit_transform(escalador.fit_transform(df[variaveis]))

# === 3. CLIMATOLOGIA DE REFERÊNCIA 1991-2020 ===
df['DOY'] = df['DATA_COMPLETA'].dt.dayofyear
base_normal = df[(df['YEAR'] >= 1991) & (df['YEAR'] <= 2020)]
climatologia = base_normal.groupby('DOY').agg(
    Normal_Tmax=('T2M_MAX', 'mean'),
    Desvio_Tmax=('T2M_MAX', 'std'),
    Percentil90_Tmax=('T2M_MAX', lambda x: np.percentile(x, 90)),
    Percentil10_Tmax=('T2M_MAX', lambda x: np.percentile(x, 10)),
    Normal_Tmin=('T2M_MIN', 'mean'),
    Desvio_Tmin=('T2M_MIN', 'std'),
    Percentil90_Tmin=('T2M_MIN', lambda x: np.percentile(x, 90)),
    Percentil10_Tmin=('T2M_MIN', lambda x: np.percentile(x, 10)),
    Normal_Tmed=('T2M_MED', 'mean'),
    Desvio_Tmed=('T2M_MED', 'std')
).reset_index()

df = df.merge(climatologia, on='DOY', how='left')

# === 4. DETECÇÃO DE EXTREMOS ===
df['Anomalia_Tmax'] = df['T2M_MAX'] - df['Normal_Tmax']
df['Anomalia_Tmin'] = df['T2M_MIN'] - df['Normal_Tmin']
df['Extremo_Calor_Tmax'] = df['T2M_MAX'] > df['Percentil90_Tmax']
df['Extremo_Frío_Tmin'] = df['T2M_MIN'] < df['Percentil10_Tmin']
df['Evento_Extremo'] = df['Extremo_Calor_Tmax'] | df['Extremo_Frío_Tmin']

# === 5. ÍNDICES SIMPLES ===
df['SU'] = df['T2M_MAX'] > 25  # Summer Days (ETCCDI)

# === 6. DETECÇÃO DE ONDAS DE CALOR/FRIO (≥ 3 dias) ===
def identificar_ondas(col_extremo, min_dias=3):
    sequencias = []
    atual = []
    for i, flag in enumerate(df[col_extremo]):
        if flag:
            atual.append(i)
        elif len(atual) >= min_dias:
            sequencias.append(atual)
            atual = []
        else:
            atual = []
    if len(atual) >= min_dias:
        sequencias.append(atual)
    return sequencias

ondas_calor = identificar_ondas('Extremo_Calor_Tmax')
ondas_frio = identificar_ondas('Extremo_Frío_Tmin')

df['WSDI'] = False
df['CSDI'] = False
for seq in ondas_calor: df.loc[seq, 'WSDI'] = True
for seq in ondas_frio: df.loc[seq, 'CSDI'] = True

# === 7. EXPORTAÇÃO DE ONDAS DETECTADAS ===
ondas_df = pd.DataFrame(
    [{"Inicio": df.loc[seq[0], 'DATA_COMPLETA'], "Fim": df.loc[seq[-1], 'DATA_COMPLETA'],
      "Duracao": len(seq), "Tipo": "Calor"} for seq in ondas_calor] +
    [{"Inicio": df.loc[seq[0], 'DATA_COMPLETA'], "Fim": df.loc[seq[-1], 'DATA_COMPLETA'],
      "Duracao": len(seq), "Tipo": "Frio"} for seq in ondas_frio]
)

# === 8. ÍNDICES ETCCDI AVANÇADOS ===
dias_ano = df.groupby('YEAR').size()
tx90p = df.groupby('YEAR')['Extremo_Calor_Tmax'].sum() / dias_ano * 100
tn10p = df.groupby('YEAR')['Extremo_Frío_Tmin'].sum() / dias_ano * 100

# === 9. ANÁLISE SAZONAL ===
df['MES'] = df['DATA_COMPLETA'].dt.month
df['SAZONAL'] = df['MES'].map(lambda m: 'DJF' if m in [12,1,2] else 'MAM' if m in [3,4,5] else 'JJA' if m in [6,7,8] else 'SON')

sazonal = df.groupby(['YEAR', 'SAZONAL']).agg(
    Dias_Calor=('Extremo_Calor_Tmax', 'sum'),
    Dias_Frio=('Extremo_Frío_Tmin', 'sum'),
    Media_Anom_Tmax=('Anomalia_Tmax', 'mean'),
    Media_Anom_Tmin=('Anomalia_Tmin', 'mean')
).reset_index()

# === 10. ÍNDICES ADICIONAIS ===
group = df.groupby('YEAR')
etccdi = group.agg(
    TXx=('T2M_MAX', 'max'), TXn=('T2M_MAX', 'min'),
    TNx=('T2M_MIN', 'max'), TNn=('T2M_MIN', 'min'),
    FD=('T2M_MIN', lambda x: (x < 0).sum()),
    TR=('T2M_MIN', lambda x: (x > 20).sum()),
    ID=('T2M_MAX', lambda x: (x < 0).sum())
).reset_index()
etccdi['DTR'] = group['T2M_MAX'].mean().values - group['T2M_MIN'].mean().values

# === 11. VISUALIZAÇÕES PARA PUBLICAÇÃO ===
plt.figure(figsize=(10,5))
tx90p.plot(label='TX90p (%)')
tn10p.plot(label='TN10p (%)')
plt.title('Evolução de TX90p e TN10p (Maputo)')
plt.ylabel('% Dias Extremos')
plt.xlabel('Ano')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.savefig(os.path.join(caminho_saida, 'TX90p_TN10p_evolucao.png'), dpi=300)
plt.close()

plt.figure(figsize=(10,5))
plt.plot(etccdi['YEAR'], etccdi['DTR'], marker='o', label='DTR')
plt.title('Amplitude Térmica Diária Média (DTR)')
plt.ylabel('°C')
plt.xlabel('Ano')
plt.grid(True)
plt.tight_layout()
plt.savefig(os.path.join(caminho_saida, 'DTR_serie_temporal.png'), dpi=300)
plt.close()

# === 12. EXPORTAÇÃO FINAL DOS RESULTADOS ===
df.to_excel(os.path.join(caminho_saida, "Serie_Completa_Tratada.xlsx"), index=False)
climatologia.to_excel(os.path.join(caminho_saida, "Climatologia_1991_2020.xlsx"), index=False)
tx90p.to_frame("TX90p (%)").join(tn10p.to_frame("TN10p (%)")).to_excel(
    os.path.join(caminho_saida, "Indices_TX90p_TN10p.xlsx"))
sazonal.to_excel(os.path.join(caminho_saida, "Resumo_Sazonal_Extremos.xlsx"), index=False)
etccdi.to_excel(os.path.join(caminho_saida, "Indices_ETCCDI_Adicionais.xlsx"), index=False)
ondas_df.to_excel(os.path.join(caminho_saida, "Ondas_Calor_Frio_Maputo.xlsx"), index=False)

print("\n✅ Código finalizado com sucesso!")
print(f"Arquivos para submissão disponíveis em: {caminho_saida}")
